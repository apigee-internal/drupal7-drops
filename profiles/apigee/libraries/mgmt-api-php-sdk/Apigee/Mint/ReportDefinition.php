<?php

namespace Apigee\Mint;

use Apigee\Exceptions\ParameterException;
use Apigee\Mint\Base\BaseObject;
use Apigee\Mint\DataStructures\MintCriteria;
use Apigee\Util\OrgConfig;

class ReportDefinition extends BaseObject
{

    private $mintCriteria;

    private $description;

    private $developer;

    protected $id;

    private $name;

    private $organization;

    private $type;

    public function __construct(OrgConfig $config)
    {
        $base_url = '/mint/organizations/' . rawurlencode($config->orgName) . '/report-definitions';
        $this->init($config, $base_url);
        $this->wrapperTag = 'reportDefinition';
        $this->developer = null; // FIXME
        $this->idField = 'id';
        $this->idIsAutogenerated = true;
    }

    public function initValues()
    {
        $this->mintCriteria = null;
        $this->description = null;
        $this->developer = null;
        $this->id = null;
        $this->name = null;
        $this->organization = null;
        $this->type = null;
    }

    public function loadFromRawData($data, $reset = false)
    {
        if ($reset) {
            $this->initValues();
        }

        $excluded_properties = array('mintCriteria', 'developer', 'organization');

        foreach (array_keys($data) as $property) {
            if (in_array($property, $excluded_properties)) {
                continue;
            }

            // form the setter method name to invoke setXxxx
            $setter_method = 'set' . ucfirst($property);
            if (method_exists($this, $setter_method)) {
                $this->$setter_method($data[$property]);
            } else {
                self::$logger->notice('No setter method was found for property "' . $property . '"');
            }
        }

        // Set objects

        if (isset($data['developer'])) {
            $dev = new Developer($this->config);
            $dev->loadFromRawData($data['developer']);
            $this->developer = $dev;
        }

        if (isset($data['organization'])) {
            $organization = new Organization($this->config);
            $organization->loadFromRawData($data['organization']);
            $this->organization = $organization;
        }

        if (isset($data['mintCriteria'])) {
            $this->mintCriteria = new MintCriteria($data['mintCriteria']);
        }
    }

    public function instantiateNew()
    {
        return new ReportDefinition($this->config);
    }

    public function __toString()
    {
        return json_encode($this);
    }

    public function getListByDeveloper($developer_id = null)
    {
        if (isset($developer_id)) {
            $id = $developer_id;
        } elseif ($this->developer instanceof Developer && strlen($this->developer->getEmail()) > 0) {
            $id = $this->developer->getEmail();
        } else {
            throw new ParameterException("Report definition identifier not specified.");
        }
        $url = '/mint/organizations/'
            . rawurlencode($this->config->orgName)
            . '/developers/'
            . rawurlencode($id)
            . '/report-definitions';
        $this->setBaseUrl($url);
        try {
          $this->get();
        } finally {
          $this->restoreBaseUrl();
        }
        $data = $this->responseObj;
        $revenue_reports = array();
        foreach ($data['reportDefinition'] as $report) {
            $report_definition = new ReportDefinition($this->config);
            $report_definition->setDeveloper($this->developer);
            $report_definition->loadFromRawData($report);
            $revenue_reports[] = $report_definition;
        }
        return $revenue_reports;
    }

    /*
    public function load($id) {
      $url = '/mint/organizations/' . rawurlencode($this->config->orgName) . '/report-definitions/' . rawurldecode($id);
      $this->get($url);
      $data = $this->responseObj;
      $this->loadFromRawData($data);
    }
    */

    public function getMintCriteria()
    {
        return $this->mintCriteria;
    }

    public function setMintCriteria($mint_criteria)
    {
        $this->mintCriteria = $mint_criteria;
    }

    public function getDescription()
    {
        return $this->description;
    }

    public function setDescription($description)
    {
        $this->description = $description;
    }

    public function getDeveloper()
    {
        return $this->developer;
    }

    public function setDeveloper($developer)
    {
        $this->developer = $developer;
    }

    public function getId()
    {
        return $this->id;
    }

    public function setId($id)
    {
        $this->id = $id;
    }

    public function getName()
    {
        return $this->name;
    }

    public function setName($name)
    {
        $this->name = $name;
    }

    public function getOrganization()
    {
        return $this->organization;
    }

    public function setOrganization($organization)
    {
        $this->organization = $organization;
    }

    public function getType()
    {
        return $this->type;
    }

    public function setType($type)
    {
        $this->type = $type;
    }
}
